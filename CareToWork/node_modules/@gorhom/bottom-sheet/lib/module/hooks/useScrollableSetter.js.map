{"version":3,"sources":["useScrollableSetter.ts"],"names":["useCallback","useEffect","findNodeHandle","useBottomSheetInternal","useScrollableSetter","ref","type","contentOffsetY","refreshable","useFocusHook","animatedScrollableType","animatedScrollableContentOffsetY","rootScrollableContentOffsetY","isContentHeightFixed","isScrollableRefreshable","setScrollableRef","removeScrollableRef","handleSettingScrollable","value","id","current","node","console","warn"],"mappings":"AAAA,SAAgBA,WAAhB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,SAASC,sBAAT,QAAuC,0BAAvC;AAIA,OAAO,MAAMC,mBAAmB,GAAG,CACjCC,GADiC,EAEjCC,IAFiC,EAGjCC,cAHiC,EAIjCC,WAJiC,EAKjCC,YAAY,GAAGR,SALkB,KAM9B;AACH;AACA,QAAM;AACJS,IAAAA,sBADI;AAEJC,IAAAA,gCAAgC,EAAEC,4BAF9B;AAGJC,IAAAA,oBAHI;AAIJC,IAAAA,uBAJI;AAKJC,IAAAA,gBALI;AAMJC,IAAAA;AANI,MAOFb,sBAAsB,EAP1B,CAFG,CAWH;;AACA,QAAMc,uBAAuB,GAAGjB,WAAW,CAAC,MAAM;AAChD;AACAY,IAAAA,4BAA4B,CAACM,KAA7B,GAAqCX,cAAc,CAACW,KAApD;AACAR,IAAAA,sBAAsB,CAACQ,KAAvB,GAA+BZ,IAA/B;AACAQ,IAAAA,uBAAuB,CAACI,KAAxB,GAAgCV,WAAhC;AACAK,IAAAA,oBAAoB,CAACK,KAArB,GAA6B,KAA7B,CALgD,CAOhD;;AACA,UAAMC,EAAE,GAAGjB,cAAc,CAACG,GAAG,CAACe,OAAL,CAAzB;;AACA,QAAID,EAAJ,EAAQ;AACNJ,MAAAA,gBAAgB,CAAC;AACfI,QAAAA,EAAE,EAAEA,EADW;AAEfE,QAAAA,IAAI,EAAEhB;AAFS,OAAD,CAAhB;AAID,KALD,MAKO;AACLiB,MAAAA,OAAO,CAACC,IAAR,CAAc,8CAAd;AACD;;AAED,WAAO,MAAM;AACXP,MAAAA,mBAAmB,CAACX,GAAD,CAAnB;AACD,KAFD;AAGD,GArB0C,EAqBxC,CACDA,GADC,EAEDC,IAFC,EAGDE,WAHC,EAIDE,sBAJC,EAKDE,4BALC,EAMDL,cANC,EAODO,uBAPC,EAQDD,oBARC,EASDE,gBATC,EAUDC,mBAVC,CArBwC,CAA3C,CAZG,CA8CH;;AACAP,EAAAA,YAAY,CAACQ,uBAAD,CAAZ;AACD,CAtDM","sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport { findNodeHandle } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { useBottomSheetInternal } from './useBottomSheetInternal';\nimport { SCROLLABLE_TYPE } from '../constants';\nimport type { Scrollable } from '../types';\n\nexport const useScrollableSetter = (\n  ref: React.RefObject<Scrollable>,\n  type: SCROLLABLE_TYPE,\n  contentOffsetY: Animated.SharedValue<number>,\n  refreshable: boolean,\n  useFocusHook = useEffect\n) => {\n  // hooks\n  const {\n    animatedScrollableType,\n    animatedScrollableContentOffsetY: rootScrollableContentOffsetY,\n    isContentHeightFixed,\n    isScrollableRefreshable,\n    setScrollableRef,\n    removeScrollableRef,\n  } = useBottomSheetInternal();\n\n  // callbacks\n  const handleSettingScrollable = useCallback(() => {\n    // set current content offset\n    rootScrollableContentOffsetY.value = contentOffsetY.value;\n    animatedScrollableType.value = type;\n    isScrollableRefreshable.value = refreshable;\n    isContentHeightFixed.value = false;\n\n    // set current scrollable ref\n    const id = findNodeHandle(ref.current);\n    if (id) {\n      setScrollableRef({\n        id: id,\n        node: ref,\n      });\n    } else {\n      console.warn(`Couldn't find the scrollable node handle id!`);\n    }\n\n    return () => {\n      removeScrollableRef(ref);\n    };\n  }, [\n    ref,\n    type,\n    refreshable,\n    animatedScrollableType,\n    rootScrollableContentOffsetY,\n    contentOffsetY,\n    isScrollableRefreshable,\n    isContentHeightFixed,\n    setScrollableRef,\n    removeScrollableRef,\n  ]);\n\n  // effects\n  useFocusHook(handleSettingScrollable);\n};\n"]}