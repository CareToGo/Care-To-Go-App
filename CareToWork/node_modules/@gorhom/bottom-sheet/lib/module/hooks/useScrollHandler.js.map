{"version":3,"sources":["useScrollHandler.ts"],"names":["useAnimatedRef","useAnimatedScrollHandler","useSharedValue","useScrollEventsHandlersDefault","workletNoop","noop","useScrollHandler","useScrollEventsHandlers","scrollableRef","scrollableContentOffsetY","handleOnScroll","handleOnBeginDrag","handleOnEndDrag","handleOnMomentumEnd","handleOnMomentumBegin","scrollHandler","onScroll","onBeginDrag","onEndDrag","onMomentumBegin","onMomentumEnd"],"mappings":"AAAA,SACEA,cADF,EAEEC,wBAFF,EAGEC,cAHF,QAIO,yBAJP;AAKA,SAASC,8BAAT,QAA+C,kCAA/C;AACA,SAASC,WAAW,IAAIC,IAAxB,QAAoC,cAApC;AAGA,OAAO,MAAMC,gBAAgB,GAAG,CAC9BC,uBAAuB,GAAGJ,8BADI,KAE3B;AACH;AACA,QAAMK,aAAa,GAAGR,cAAc,EAApC,CAFG,CAIH;;AACA,QAAMS,wBAAwB,GAAGP,cAAc,CAAS,CAAT,CAA/C,CALG,CAOH;;AACA,QAAM;AACJQ,IAAAA,cAAc,GAAGL,IADb;AAEJM,IAAAA,iBAAiB,GAAGN,IAFhB;AAGJO,IAAAA,eAAe,GAAGP,IAHd;AAIJQ,IAAAA,mBAAmB,GAAGR,IAJlB;AAKJS,IAAAA,qBAAqB,GAAGT;AALpB,MAMFE,uBAAuB,CAACC,aAAD,EAAgBC,wBAAhB,CAN3B,CARG,CAgBH;;AACA,QAAMM,aAAa,GAAGd,wBAAwB,CAC5C;AACEe,IAAAA,QAAQ,EAAEN,cADZ;AAEEO,IAAAA,WAAW,EAAEN,iBAFf;AAGEO,IAAAA,SAAS,EAAEN,eAHb;AAIEO,IAAAA,eAAe,EAAEL,qBAJnB;AAKEM,IAAAA,aAAa,EAAEP;AALjB,GAD4C,EAQ5C,CACEH,cADF,EAEEC,iBAFF,EAGEC,eAHF,EAIEE,qBAJF,EAKED,mBALF,CAR4C,CAA9C;AAiBA,SAAO;AAAEE,IAAAA,aAAF;AAAiBP,IAAAA,aAAjB;AAAgCC,IAAAA;AAAhC,GAAP;AACD,CArCM","sourcesContent":["import {\n  useAnimatedRef,\n  useAnimatedScrollHandler,\n  useSharedValue,\n} from 'react-native-reanimated';\nimport { useScrollEventsHandlersDefault } from './useScrollEventsHandlersDefault';\nimport { workletNoop as noop } from '../utilities';\nimport type { Scrollable } from '../types';\n\nexport const useScrollHandler = (\n  useScrollEventsHandlers = useScrollEventsHandlersDefault\n) => {\n  // refs\n  const scrollableRef = useAnimatedRef<Scrollable>();\n\n  // variables\n  const scrollableContentOffsetY = useSharedValue<number>(0);\n\n  // hooks\n  const {\n    handleOnScroll = noop,\n    handleOnBeginDrag = noop,\n    handleOnEndDrag = noop,\n    handleOnMomentumEnd = noop,\n    handleOnMomentumBegin = noop,\n  } = useScrollEventsHandlers(scrollableRef, scrollableContentOffsetY);\n\n  // callbacks\n  const scrollHandler = useAnimatedScrollHandler(\n    {\n      onScroll: handleOnScroll,\n      onBeginDrag: handleOnBeginDrag,\n      onEndDrag: handleOnEndDrag,\n      onMomentumBegin: handleOnMomentumBegin,\n      onMomentumEnd: handleOnMomentumEnd,\n    },\n    [\n      handleOnScroll,\n      handleOnBeginDrag,\n      handleOnEndDrag,\n      handleOnMomentumBegin,\n      handleOnMomentumEnd,\n    ]\n  );\n\n  return { scrollHandler, scrollableRef, scrollableContentOffsetY };\n};\n"]}