{"version":3,"sources":["useNormalizedSnapPoints.ts"],"names":["useDerivedValue","normalizeSnapPoint","INITIAL_CONTAINER_HEIGHT","INITIAL_SNAP_POINT","useNormalizedSnapPoints","providedSnapPoints","containerHeight","topInset","bottomInset","$modal","normalizedSnapPoints","value","map","snapPoint"],"mappings":"AAAA,SAAmBA,eAAnB,QAA0C,yBAA1C;AACA,SAASC,kBAAT,QAAmC,cAAnC;AAEA,SACEC,wBADF,EAEEC,kBAFF,QAGO,qCAHP;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,uBAAuB,GAAG,CACrCC,kBADqC,EAErCC,eAFqC,EAGrCC,QAHqC,EAIrCC,WAJqC,EAKrCC,MALqC,KAMlC;AACH,QAAMC,oBAAoB,GAAGV,eAAe,CAAC,MAC3C,CAAC,WAAWK,kBAAX,GACGA,kBAAkB,CAACM,KADtB,GAEGN,kBAFJ,EAGEO,GAHF,CAGMC,SAAS,IAAI;AACjB,QAAIP,eAAe,CAACK,KAAhB,KAA0BT,wBAA9B,EAAwD;AACtD,aAAOC,kBAAP;AACD;;AAED,WAAOF,kBAAkB,CACvBY,SADuB,EAEvBP,eAAe,CAACK,KAFO,EAGvBJ,QAHuB,EAIvBC,WAJuB,EAKvBC,MALuB,CAAzB;AAOD,GAfD,CAD0C,CAA5C;AAmBA,SAAOC,oBAAP;AACD,CA3BM","sourcesContent":["import Animated, { useDerivedValue } from 'react-native-reanimated';\nimport { normalizeSnapPoint } from '../utilities';\nimport type { BottomSheetProps } from '../components/bottomSheet';\nimport {\n  INITIAL_CONTAINER_HEIGHT,\n  INITIAL_SNAP_POINT,\n} from '../components/bottomSheet/constants';\n\n/**\n * Convert percentage snap points to pixels in screen and calculate\n * the accurate snap points positions.\n * @param providedSnapPoints provided snap points.\n * @param containerHeight BottomSheetContainer height.\n * @param topInset top inset.\n * @param bottomInset bottom inset.\n * @param $modal is sheet in a modal.\n * @returns {Animated.SharedValue<number[]>}\n */\nexport const useNormalizedSnapPoints = (\n  providedSnapPoints: BottomSheetProps['snapPoints'],\n  containerHeight: Animated.SharedValue<number>,\n  topInset: number,\n  bottomInset: number,\n  $modal: boolean\n) => {\n  const normalizedSnapPoints = useDerivedValue(() =>\n    ('value' in providedSnapPoints\n      ? providedSnapPoints.value\n      : providedSnapPoints\n    ).map(snapPoint => {\n      if (containerHeight.value === INITIAL_CONTAINER_HEIGHT) {\n        return INITIAL_SNAP_POINT;\n      }\n\n      return normalizeSnapPoint(\n        snapPoint,\n        containerHeight.value,\n        topInset,\n        bottomInset,\n        $modal\n      );\n    })\n  );\n\n  return normalizedSnapPoints;\n};\n"]}