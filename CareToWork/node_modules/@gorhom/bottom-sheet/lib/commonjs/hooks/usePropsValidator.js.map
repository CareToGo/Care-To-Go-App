{"version":3,"sources":["usePropsValidator.ts"],"names":["usePropsValidator","index","snapPoints","topInset","bottomInset","_snapPoints","value","map","snapPoint","_snapPoint","parseInt","replace","INITIAL_SNAP_POINT","length"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAGA;AACA;AACA;AACA;AAEO,MAAMA,iBAAiB,GAAG,CAAC;AAChCC,EAAAA,KADgC;AAEhCC,EAAAA,UAFgC;AAGhCC,EAAAA,QAHgC;AAIhCC,EAAAA;AAJgC,CAAD,KAKT;AACtB,sBAAQ,MAAM;AACZ;AACA,UAAMC,WAAW,GAAG,WAAWH,UAAX,GAAwBA,UAAU,CAACI,KAAnC,GAA2CJ,UAA/D;;AACA,4BACEG,WADF,EAEG,wEAFH;;AAKAA,IAAAA,WAAW,CAACE,GAAZ,CAAgBC,SAAS,IAAI;AAC3B,YAAMC,UAAU,GACd,OAAOD,SAAP,KAAqB,QAArB,GACIA,SADJ,GAEIE,QAAQ,CAACF,SAAS,CAACG,OAAV,CAAkB,GAAlB,EAAuB,EAAvB,CAAD,EAA6B,EAA7B,CAHd;;AAKA,8BACEF,UAAU,GAAG,CAAb,IAAkBA,UAAU,KAAKG,6BADnC,EAEG,eAAcJ,SAAU,qGAF3B;AAID,KAVD;;AAYA,4BACE,WAAWH,WAAX,IAA0BA,WAAW,CAACQ,MAAZ,GAAqB,CADjD,EAEG,mFAFH,EApBY,CAwBZ;AAEA;;AACA,4BACE,OAAOZ,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,WADhD,EAEG,uEAFH;AAKA,4BACE,OAAOA,KAAP,KAAiB,QAAjB,GACIA,KAAK,IAAI,CAAC,CAAV,IAAeA,KAAK,IAAII,WAAW,CAACQ,MAAZ,GAAqB,CADjD,GAEI,IAHN,EAIG,oGACCR,WAAW,CAACQ,MAAZ,GAAqB,CACtB,EANH,EAhCY,CAwCZ;AAEA;;AACA,4BACE,OAAOV,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAP,KAAoB,WADtD,EAEG,0EAFH;AAIA,4BACE,OAAOC,WAAP,KAAuB,QAAvB,IAAmC,OAAOA,WAAP,KAAuB,WAD5D,EAEG,6EAFH,EA/CY,CAmDZ;AAEA;AACD,GAtDD,EAsDG,CAACH,KAAD,EAAQC,UAAR,EAAoBC,QAApB,EAA8BC,WAA9B,CAtDH;AAuDD,CA7DM","sourcesContent":["import { useMemo } from 'react';\nimport invariant from 'invariant';\nimport { INITIAL_SNAP_POINT } from '../components/bottomSheet/constants';\nimport type { BottomSheetProps } from '../components/bottomSheet';\n\n/**\n * @todo\n * replace this with `prop-types`.\n */\n\nexport const usePropsValidator = ({\n  index,\n  snapPoints,\n  topInset,\n  bottomInset,\n}: BottomSheetProps) => {\n  useMemo(() => {\n    //#region snap points\n    const _snapPoints = 'value' in snapPoints ? snapPoints.value : snapPoints;\n    invariant(\n      _snapPoints,\n      `'snapPoints' was not provided! please provide at least one snap point.`\n    );\n\n    _snapPoints.map(snapPoint => {\n      const _snapPoint =\n        typeof snapPoint === 'number'\n          ? snapPoint\n          : parseInt(snapPoint.replace('%', ''), 10);\n\n      invariant(\n        _snapPoint > 0 || _snapPoint === INITIAL_SNAP_POINT,\n        `Snap point '${snapPoint}' is invalid. if you want to allow user to close the sheet, Please use 'enablePanDownToClose' prop.`\n      );\n    });\n\n    invariant(\n      'value' in _snapPoints || _snapPoints.length > 0,\n      `'snapPoints' was provided with no points! please provide at least one snap point.`\n    );\n    //#endregion\n\n    //#region index\n    invariant(\n      typeof index === 'number' || typeof index === 'undefined',\n      `'index' was provided but with wrong type ! expected type is a number.`\n    );\n\n    invariant(\n      typeof index === 'number'\n        ? index >= -1 && index <= _snapPoints.length - 1\n        : true,\n      `'index' was provided but out of the provided snap points range! expected value to be between -1, ${\n        _snapPoints.length - 1\n      }`\n    );\n    //#endregion\n\n    //#region insets\n    invariant(\n      typeof topInset === 'number' || typeof topInset === 'undefined',\n      `'topInset' was provided but with wrong type ! expected type is a number.`\n    );\n    invariant(\n      typeof bottomInset === 'number' || typeof bottomInset === 'undefined',\n      `'bottomInset' was provided but with wrong type ! expected type is a number.`\n    );\n    //#endregion\n\n    // animations\n  }, [index, snapPoints, topInset, bottomInset]);\n};\n"]}