{"version":3,"sources":["createBottomSheetScrollableComponent.tsx"],"names":["createBottomSheetScrollableComponent","type","ScrollableComponent","props","ref","focusHook","scrollEventsHandlersHook","enableFooterMarginAdjustment","overScrollMode","keyboardDismissMode","showsVerticalScrollIndicator","style","refreshing","onRefresh","progressViewOffset","refreshControl","rest","nativeGestureRef","refreshControlGestureRef","scrollableRef","scrollableContentOffsetY","scrollHandler","enableContentPanningGesture","animatedFooterHeight","animatedScrollableState","scrollableAnimatedProps","decelerationRate","SCROLLABLE_DECELERATION_RATE_MAPPER","value","SCROLLABLE_STATE","UNLOCKED","containerAnimatedStyle","marginBottom","containerStyle","current","undefined","Platform","OS","scrollableContent","GESTURE_SOURCE","SCROLLABLE","styles","container"],"mappings":"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","sourcesContent":["import React, { forwardRef, useImperativeHandle, useMemo, useRef } from 'react';\nimport { Platform } from 'react-native';\nimport { useAnimatedProps, useAnimatedStyle } from 'react-native-reanimated';\nimport { NativeViewGestureHandler } from 'react-native-gesture-handler';\nimport BottomSheetDraggableView from '../bottomSheetDraggableView';\nimport BottomSheetRefreshControl from '../bottomSheetRefreshControl';\nimport {\n  useScrollHandler,\n  useScrollableSetter,\n  useBottomSheetInternal,\n} from '../../hooks';\nimport {\n  GESTURE_SOURCE,\n  SCROLLABLE_DECELERATION_RATE_MAPPER,\n  SCROLLABLE_STATE,\n  SCROLLABLE_TYPE,\n} from '../../constants';\nimport { styles } from './styles';\n\nexport function createBottomSheetScrollableComponent<T, P>(\n  type: SCROLLABLE_TYPE,\n  ScrollableComponent: any\n) {\n  return forwardRef<T, P>((props, ref) => {\n    // props\n    const {\n      // hooks\n      focusHook,\n      scrollEventsHandlersHook,\n      // props\n      enableFooterMarginAdjustment = false,\n      overScrollMode = 'never',\n      keyboardDismissMode = 'interactive',\n      showsVerticalScrollIndicator = true,\n      style,\n      refreshing,\n      onRefresh,\n      progressViewOffset,\n      refreshControl,\n      ...rest\n    }: any = props;\n\n    //#region refs\n    const nativeGestureRef = useRef<NativeViewGestureHandler>(null);\n    const refreshControlGestureRef = useRef<NativeViewGestureHandler>(null);\n    //#endregion\n\n    //#region hooks\n    const { scrollableRef, scrollableContentOffsetY, scrollHandler } =\n      useScrollHandler(scrollEventsHandlersHook);\n    const {\n      enableContentPanningGesture,\n      animatedFooterHeight,\n      animatedScrollableState,\n    } = useBottomSheetInternal();\n    //#endregion\n\n    //#region variables\n    const scrollableAnimatedProps = useAnimatedProps(\n      () => ({\n        decelerationRate:\n          SCROLLABLE_DECELERATION_RATE_MAPPER[animatedScrollableState.value],\n        showsVerticalScrollIndicator: showsVerticalScrollIndicator\n          ? animatedScrollableState.value === SCROLLABLE_STATE.UNLOCKED\n          : showsVerticalScrollIndicator,\n      }),\n      [showsVerticalScrollIndicator]\n    );\n    //#endregion\n\n    //#region styles\n    const containerAnimatedStyle = useAnimatedStyle(\n      () => ({\n        marginBottom: enableFooterMarginAdjustment\n          ? animatedFooterHeight.value\n          : 0,\n      }),\n      [enableFooterMarginAdjustment]\n    );\n    const containerStyle = useMemo(() => {\n      return enableFooterMarginAdjustment\n        ? [\n            ...(style ? ('length' in style ? style : [style]) : []),\n            containerAnimatedStyle,\n          ]\n        : style;\n    }, [enableFooterMarginAdjustment, style, containerAnimatedStyle]);\n    //#endregion\n\n    //#region effects\n    // @ts-ignore\n    useImperativeHandle(ref, () => scrollableRef.current);\n    useScrollableSetter(\n      scrollableRef,\n      type,\n      scrollableContentOffsetY,\n      onRefresh !== undefined,\n      focusHook\n    );\n    //#endregion\n\n    //#region render\n    if (Platform.OS === 'android') {\n      const scrollableContent = (\n        <NativeViewGestureHandler\n          ref={nativeGestureRef}\n          enabled={enableContentPanningGesture}\n          shouldCancelWhenOutside={false}\n        >\n          <ScrollableComponent\n            animatedProps={scrollableAnimatedProps}\n            {...rest}\n            scrollEventThrottle={16}\n            ref={scrollableRef}\n            overScrollMode={overScrollMode}\n            keyboardDismissMode={keyboardDismissMode}\n            onScroll={scrollHandler}\n            style={containerStyle}\n          />\n        </NativeViewGestureHandler>\n      );\n      return (\n        <BottomSheetDraggableView\n          nativeGestureRef={nativeGestureRef}\n          refreshControlGestureRef={refreshControlGestureRef}\n          gestureType={GESTURE_SOURCE.SCROLLABLE}\n          style={styles.container}\n        >\n          {onRefresh ? (\n            <BottomSheetRefreshControl\n              ref={refreshControlGestureRef}\n              refreshing={refreshing}\n              onRefresh={onRefresh}\n              progressViewOffset={progressViewOffset}\n              style={styles.container}\n            >\n              {scrollableContent}\n            </BottomSheetRefreshControl>\n          ) : (\n            scrollableContent\n          )}\n        </BottomSheetDraggableView>\n      );\n    }\n    return (\n      <BottomSheetDraggableView\n        nativeGestureRef={nativeGestureRef}\n        gestureType={GESTURE_SOURCE.SCROLLABLE}\n        style={styles.container}\n      >\n        <NativeViewGestureHandler\n          ref={nativeGestureRef}\n          enabled={enableContentPanningGesture}\n          shouldCancelWhenOutside={false}\n        >\n          <ScrollableComponent\n            animatedProps={scrollableAnimatedProps}\n            {...rest}\n            scrollEventThrottle={16}\n            ref={scrollableRef}\n            overScrollMode={overScrollMode}\n            keyboardDismissMode={keyboardDismissMode}\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n            progressViewOffset={progressViewOffset}\n            refreshControl={refreshControl}\n            onScroll={scrollHandler}\n            style={containerStyle}\n          />\n        </NativeViewGestureHandler>\n      </BottomSheetDraggableView>\n    );\n    //#endregion\n  });\n}\n"]}