import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
import { AssociateTrackerConsumerCommandInput, AssociateTrackerConsumerCommandOutput } from "./commands/AssociateTrackerConsumerCommand";
import { BatchDeleteDevicePositionHistoryCommandInput, BatchDeleteDevicePositionHistoryCommandOutput } from "./commands/BatchDeleteDevicePositionHistoryCommand";
import { BatchDeleteGeofenceCommandInput, BatchDeleteGeofenceCommandOutput } from "./commands/BatchDeleteGeofenceCommand";
import { BatchEvaluateGeofencesCommandInput, BatchEvaluateGeofencesCommandOutput } from "./commands/BatchEvaluateGeofencesCommand";
import { BatchGetDevicePositionCommandInput, BatchGetDevicePositionCommandOutput } from "./commands/BatchGetDevicePositionCommand";
import { BatchPutGeofenceCommandInput, BatchPutGeofenceCommandOutput } from "./commands/BatchPutGeofenceCommand";
import { BatchUpdateDevicePositionCommandInput, BatchUpdateDevicePositionCommandOutput } from "./commands/BatchUpdateDevicePositionCommand";
import { CalculateRouteCommandInput, CalculateRouteCommandOutput } from "./commands/CalculateRouteCommand";
import { CalculateRouteMatrixCommandInput, CalculateRouteMatrixCommandOutput } from "./commands/CalculateRouteMatrixCommand";
import { CreateGeofenceCollectionCommandInput, CreateGeofenceCollectionCommandOutput } from "./commands/CreateGeofenceCollectionCommand";
import { CreateMapCommandInput, CreateMapCommandOutput } from "./commands/CreateMapCommand";
import { CreatePlaceIndexCommandInput, CreatePlaceIndexCommandOutput } from "./commands/CreatePlaceIndexCommand";
import { CreateRouteCalculatorCommandInput, CreateRouteCalculatorCommandOutput } from "./commands/CreateRouteCalculatorCommand";
import { CreateTrackerCommandInput, CreateTrackerCommandOutput } from "./commands/CreateTrackerCommand";
import { DeleteGeofenceCollectionCommandInput, DeleteGeofenceCollectionCommandOutput } from "./commands/DeleteGeofenceCollectionCommand";
import { DeleteMapCommandInput, DeleteMapCommandOutput } from "./commands/DeleteMapCommand";
import { DeletePlaceIndexCommandInput, DeletePlaceIndexCommandOutput } from "./commands/DeletePlaceIndexCommand";
import { DeleteRouteCalculatorCommandInput, DeleteRouteCalculatorCommandOutput } from "./commands/DeleteRouteCalculatorCommand";
import { DeleteTrackerCommandInput, DeleteTrackerCommandOutput } from "./commands/DeleteTrackerCommand";
import { DescribeGeofenceCollectionCommandInput, DescribeGeofenceCollectionCommandOutput } from "./commands/DescribeGeofenceCollectionCommand";
import { DescribeMapCommandInput, DescribeMapCommandOutput } from "./commands/DescribeMapCommand";
import { DescribePlaceIndexCommandInput, DescribePlaceIndexCommandOutput } from "./commands/DescribePlaceIndexCommand";
import { DescribeRouteCalculatorCommandInput, DescribeRouteCalculatorCommandOutput } from "./commands/DescribeRouteCalculatorCommand";
import { DescribeTrackerCommandInput, DescribeTrackerCommandOutput } from "./commands/DescribeTrackerCommand";
import { DisassociateTrackerConsumerCommandInput, DisassociateTrackerConsumerCommandOutput } from "./commands/DisassociateTrackerConsumerCommand";
import { GetDevicePositionCommandInput, GetDevicePositionCommandOutput } from "./commands/GetDevicePositionCommand";
import { GetDevicePositionHistoryCommandInput, GetDevicePositionHistoryCommandOutput } from "./commands/GetDevicePositionHistoryCommand";
import { GetGeofenceCommandInput, GetGeofenceCommandOutput } from "./commands/GetGeofenceCommand";
import { GetMapGlyphsCommandInput, GetMapGlyphsCommandOutput } from "./commands/GetMapGlyphsCommand";
import { GetMapSpritesCommandInput, GetMapSpritesCommandOutput } from "./commands/GetMapSpritesCommand";
import { GetMapStyleDescriptorCommandInput, GetMapStyleDescriptorCommandOutput } from "./commands/GetMapStyleDescriptorCommand";
import { GetMapTileCommandInput, GetMapTileCommandOutput } from "./commands/GetMapTileCommand";
import { ListDevicePositionsCommandInput, ListDevicePositionsCommandOutput } from "./commands/ListDevicePositionsCommand";
import { ListGeofenceCollectionsCommandInput, ListGeofenceCollectionsCommandOutput } from "./commands/ListGeofenceCollectionsCommand";
import { ListGeofencesCommandInput, ListGeofencesCommandOutput } from "./commands/ListGeofencesCommand";
import { ListMapsCommandInput, ListMapsCommandOutput } from "./commands/ListMapsCommand";
import { ListPlaceIndexesCommandInput, ListPlaceIndexesCommandOutput } from "./commands/ListPlaceIndexesCommand";
import { ListRouteCalculatorsCommandInput, ListRouteCalculatorsCommandOutput } from "./commands/ListRouteCalculatorsCommand";
import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "./commands/ListTagsForResourceCommand";
import { ListTrackerConsumersCommandInput, ListTrackerConsumersCommandOutput } from "./commands/ListTrackerConsumersCommand";
import { ListTrackersCommandInput, ListTrackersCommandOutput } from "./commands/ListTrackersCommand";
import { PutGeofenceCommandInput, PutGeofenceCommandOutput } from "./commands/PutGeofenceCommand";
import { SearchPlaceIndexForPositionCommandInput, SearchPlaceIndexForPositionCommandOutput } from "./commands/SearchPlaceIndexForPositionCommand";
import { SearchPlaceIndexForSuggestionsCommandInput, SearchPlaceIndexForSuggestionsCommandOutput } from "./commands/SearchPlaceIndexForSuggestionsCommand";
import { SearchPlaceIndexForTextCommandInput, SearchPlaceIndexForTextCommandOutput } from "./commands/SearchPlaceIndexForTextCommand";
import { TagResourceCommandInput, TagResourceCommandOutput } from "./commands/TagResourceCommand";
import { UntagResourceCommandInput, UntagResourceCommandOutput } from "./commands/UntagResourceCommand";
import { UpdateGeofenceCollectionCommandInput, UpdateGeofenceCollectionCommandOutput } from "./commands/UpdateGeofenceCollectionCommand";
import { UpdateMapCommandInput, UpdateMapCommandOutput } from "./commands/UpdateMapCommand";
import { UpdatePlaceIndexCommandInput, UpdatePlaceIndexCommandOutput } from "./commands/UpdatePlaceIndexCommand";
import { UpdateRouteCalculatorCommandInput, UpdateRouteCalculatorCommandOutput } from "./commands/UpdateRouteCalculatorCommand";
import { UpdateTrackerCommandInput, UpdateTrackerCommandOutput } from "./commands/UpdateTrackerCommand";
import { LocationClient } from "./LocationClient";

export declare class Location extends LocationClient {
    
    associateTrackerConsumer(args: AssociateTrackerConsumerCommandInput, options?: __HttpHandlerOptions): Promise<AssociateTrackerConsumerCommandOutput>;
    associateTrackerConsumer(args: AssociateTrackerConsumerCommandInput, cb: (err: any, data?: AssociateTrackerConsumerCommandOutput) => void): void;
    associateTrackerConsumer(args: AssociateTrackerConsumerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateTrackerConsumerCommandOutput) => void): void;
    
    batchDeleteDevicePositionHistory(args: BatchDeleteDevicePositionHistoryCommandInput, options?: __HttpHandlerOptions): Promise<BatchDeleteDevicePositionHistoryCommandOutput>;
    batchDeleteDevicePositionHistory(args: BatchDeleteDevicePositionHistoryCommandInput, cb: (err: any, data?: BatchDeleteDevicePositionHistoryCommandOutput) => void): void;
    batchDeleteDevicePositionHistory(args: BatchDeleteDevicePositionHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDeleteDevicePositionHistoryCommandOutput) => void): void;
    
    batchDeleteGeofence(args: BatchDeleteGeofenceCommandInput, options?: __HttpHandlerOptions): Promise<BatchDeleteGeofenceCommandOutput>;
    batchDeleteGeofence(args: BatchDeleteGeofenceCommandInput, cb: (err: any, data?: BatchDeleteGeofenceCommandOutput) => void): void;
    batchDeleteGeofence(args: BatchDeleteGeofenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDeleteGeofenceCommandOutput) => void): void;
    
    batchEvaluateGeofences(args: BatchEvaluateGeofencesCommandInput, options?: __HttpHandlerOptions): Promise<BatchEvaluateGeofencesCommandOutput>;
    batchEvaluateGeofences(args: BatchEvaluateGeofencesCommandInput, cb: (err: any, data?: BatchEvaluateGeofencesCommandOutput) => void): void;
    batchEvaluateGeofences(args: BatchEvaluateGeofencesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchEvaluateGeofencesCommandOutput) => void): void;
    
    batchGetDevicePosition(args: BatchGetDevicePositionCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetDevicePositionCommandOutput>;
    batchGetDevicePosition(args: BatchGetDevicePositionCommandInput, cb: (err: any, data?: BatchGetDevicePositionCommandOutput) => void): void;
    batchGetDevicePosition(args: BatchGetDevicePositionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetDevicePositionCommandOutput) => void): void;
    
    batchPutGeofence(args: BatchPutGeofenceCommandInput, options?: __HttpHandlerOptions): Promise<BatchPutGeofenceCommandOutput>;
    batchPutGeofence(args: BatchPutGeofenceCommandInput, cb: (err: any, data?: BatchPutGeofenceCommandOutput) => void): void;
    batchPutGeofence(args: BatchPutGeofenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchPutGeofenceCommandOutput) => void): void;
    
    batchUpdateDevicePosition(args: BatchUpdateDevicePositionCommandInput, options?: __HttpHandlerOptions): Promise<BatchUpdateDevicePositionCommandOutput>;
    batchUpdateDevicePosition(args: BatchUpdateDevicePositionCommandInput, cb: (err: any, data?: BatchUpdateDevicePositionCommandOutput) => void): void;
    batchUpdateDevicePosition(args: BatchUpdateDevicePositionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchUpdateDevicePositionCommandOutput) => void): void;
    
    calculateRoute(args: CalculateRouteCommandInput, options?: __HttpHandlerOptions): Promise<CalculateRouteCommandOutput>;
    calculateRoute(args: CalculateRouteCommandInput, cb: (err: any, data?: CalculateRouteCommandOutput) => void): void;
    calculateRoute(args: CalculateRouteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CalculateRouteCommandOutput) => void): void;
    
    calculateRouteMatrix(args: CalculateRouteMatrixCommandInput, options?: __HttpHandlerOptions): Promise<CalculateRouteMatrixCommandOutput>;
    calculateRouteMatrix(args: CalculateRouteMatrixCommandInput, cb: (err: any, data?: CalculateRouteMatrixCommandOutput) => void): void;
    calculateRouteMatrix(args: CalculateRouteMatrixCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CalculateRouteMatrixCommandOutput) => void): void;
    
    createGeofenceCollection(args: CreateGeofenceCollectionCommandInput, options?: __HttpHandlerOptions): Promise<CreateGeofenceCollectionCommandOutput>;
    createGeofenceCollection(args: CreateGeofenceCollectionCommandInput, cb: (err: any, data?: CreateGeofenceCollectionCommandOutput) => void): void;
    createGeofenceCollection(args: CreateGeofenceCollectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGeofenceCollectionCommandOutput) => void): void;
    
    createMap(args: CreateMapCommandInput, options?: __HttpHandlerOptions): Promise<CreateMapCommandOutput>;
    createMap(args: CreateMapCommandInput, cb: (err: any, data?: CreateMapCommandOutput) => void): void;
    createMap(args: CreateMapCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateMapCommandOutput) => void): void;
    
    createPlaceIndex(args: CreatePlaceIndexCommandInput, options?: __HttpHandlerOptions): Promise<CreatePlaceIndexCommandOutput>;
    createPlaceIndex(args: CreatePlaceIndexCommandInput, cb: (err: any, data?: CreatePlaceIndexCommandOutput) => void): void;
    createPlaceIndex(args: CreatePlaceIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePlaceIndexCommandOutput) => void): void;
    
    createRouteCalculator(args: CreateRouteCalculatorCommandInput, options?: __HttpHandlerOptions): Promise<CreateRouteCalculatorCommandOutput>;
    createRouteCalculator(args: CreateRouteCalculatorCommandInput, cb: (err: any, data?: CreateRouteCalculatorCommandOutput) => void): void;
    createRouteCalculator(args: CreateRouteCalculatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRouteCalculatorCommandOutput) => void): void;
    
    createTracker(args: CreateTrackerCommandInput, options?: __HttpHandlerOptions): Promise<CreateTrackerCommandOutput>;
    createTracker(args: CreateTrackerCommandInput, cb: (err: any, data?: CreateTrackerCommandOutput) => void): void;
    createTracker(args: CreateTrackerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTrackerCommandOutput) => void): void;
    
    deleteGeofenceCollection(args: DeleteGeofenceCollectionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGeofenceCollectionCommandOutput>;
    deleteGeofenceCollection(args: DeleteGeofenceCollectionCommandInput, cb: (err: any, data?: DeleteGeofenceCollectionCommandOutput) => void): void;
    deleteGeofenceCollection(args: DeleteGeofenceCollectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGeofenceCollectionCommandOutput) => void): void;
    
    deleteMap(args: DeleteMapCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMapCommandOutput>;
    deleteMap(args: DeleteMapCommandInput, cb: (err: any, data?: DeleteMapCommandOutput) => void): void;
    deleteMap(args: DeleteMapCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMapCommandOutput) => void): void;
    
    deletePlaceIndex(args: DeletePlaceIndexCommandInput, options?: __HttpHandlerOptions): Promise<DeletePlaceIndexCommandOutput>;
    deletePlaceIndex(args: DeletePlaceIndexCommandInput, cb: (err: any, data?: DeletePlaceIndexCommandOutput) => void): void;
    deletePlaceIndex(args: DeletePlaceIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePlaceIndexCommandOutput) => void): void;
    
    deleteRouteCalculator(args: DeleteRouteCalculatorCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRouteCalculatorCommandOutput>;
    deleteRouteCalculator(args: DeleteRouteCalculatorCommandInput, cb: (err: any, data?: DeleteRouteCalculatorCommandOutput) => void): void;
    deleteRouteCalculator(args: DeleteRouteCalculatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRouteCalculatorCommandOutput) => void): void;
    
    deleteTracker(args: DeleteTrackerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTrackerCommandOutput>;
    deleteTracker(args: DeleteTrackerCommandInput, cb: (err: any, data?: DeleteTrackerCommandOutput) => void): void;
    deleteTracker(args: DeleteTrackerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTrackerCommandOutput) => void): void;
    
    describeGeofenceCollection(args: DescribeGeofenceCollectionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeGeofenceCollectionCommandOutput>;
    describeGeofenceCollection(args: DescribeGeofenceCollectionCommandInput, cb: (err: any, data?: DescribeGeofenceCollectionCommandOutput) => void): void;
    describeGeofenceCollection(args: DescribeGeofenceCollectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeGeofenceCollectionCommandOutput) => void): void;
    
    describeMap(args: DescribeMapCommandInput, options?: __HttpHandlerOptions): Promise<DescribeMapCommandOutput>;
    describeMap(args: DescribeMapCommandInput, cb: (err: any, data?: DescribeMapCommandOutput) => void): void;
    describeMap(args: DescribeMapCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeMapCommandOutput) => void): void;
    
    describePlaceIndex(args: DescribePlaceIndexCommandInput, options?: __HttpHandlerOptions): Promise<DescribePlaceIndexCommandOutput>;
    describePlaceIndex(args: DescribePlaceIndexCommandInput, cb: (err: any, data?: DescribePlaceIndexCommandOutput) => void): void;
    describePlaceIndex(args: DescribePlaceIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePlaceIndexCommandOutput) => void): void;
    
    describeRouteCalculator(args: DescribeRouteCalculatorCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRouteCalculatorCommandOutput>;
    describeRouteCalculator(args: DescribeRouteCalculatorCommandInput, cb: (err: any, data?: DescribeRouteCalculatorCommandOutput) => void): void;
    describeRouteCalculator(args: DescribeRouteCalculatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRouteCalculatorCommandOutput) => void): void;
    
    describeTracker(args: DescribeTrackerCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTrackerCommandOutput>;
    describeTracker(args: DescribeTrackerCommandInput, cb: (err: any, data?: DescribeTrackerCommandOutput) => void): void;
    describeTracker(args: DescribeTrackerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTrackerCommandOutput) => void): void;
    
    disassociateTrackerConsumer(args: DisassociateTrackerConsumerCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateTrackerConsumerCommandOutput>;
    disassociateTrackerConsumer(args: DisassociateTrackerConsumerCommandInput, cb: (err: any, data?: DisassociateTrackerConsumerCommandOutput) => void): void;
    disassociateTrackerConsumer(args: DisassociateTrackerConsumerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateTrackerConsumerCommandOutput) => void): void;
    
    getDevicePosition(args: GetDevicePositionCommandInput, options?: __HttpHandlerOptions): Promise<GetDevicePositionCommandOutput>;
    getDevicePosition(args: GetDevicePositionCommandInput, cb: (err: any, data?: GetDevicePositionCommandOutput) => void): void;
    getDevicePosition(args: GetDevicePositionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDevicePositionCommandOutput) => void): void;
    
    getDevicePositionHistory(args: GetDevicePositionHistoryCommandInput, options?: __HttpHandlerOptions): Promise<GetDevicePositionHistoryCommandOutput>;
    getDevicePositionHistory(args: GetDevicePositionHistoryCommandInput, cb: (err: any, data?: GetDevicePositionHistoryCommandOutput) => void): void;
    getDevicePositionHistory(args: GetDevicePositionHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDevicePositionHistoryCommandOutput) => void): void;
    
    getGeofence(args: GetGeofenceCommandInput, options?: __HttpHandlerOptions): Promise<GetGeofenceCommandOutput>;
    getGeofence(args: GetGeofenceCommandInput, cb: (err: any, data?: GetGeofenceCommandOutput) => void): void;
    getGeofence(args: GetGeofenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGeofenceCommandOutput) => void): void;
    
    getMapGlyphs(args: GetMapGlyphsCommandInput, options?: __HttpHandlerOptions): Promise<GetMapGlyphsCommandOutput>;
    getMapGlyphs(args: GetMapGlyphsCommandInput, cb: (err: any, data?: GetMapGlyphsCommandOutput) => void): void;
    getMapGlyphs(args: GetMapGlyphsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMapGlyphsCommandOutput) => void): void;
    
    getMapSprites(args: GetMapSpritesCommandInput, options?: __HttpHandlerOptions): Promise<GetMapSpritesCommandOutput>;
    getMapSprites(args: GetMapSpritesCommandInput, cb: (err: any, data?: GetMapSpritesCommandOutput) => void): void;
    getMapSprites(args: GetMapSpritesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMapSpritesCommandOutput) => void): void;
    
    getMapStyleDescriptor(args: GetMapStyleDescriptorCommandInput, options?: __HttpHandlerOptions): Promise<GetMapStyleDescriptorCommandOutput>;
    getMapStyleDescriptor(args: GetMapStyleDescriptorCommandInput, cb: (err: any, data?: GetMapStyleDescriptorCommandOutput) => void): void;
    getMapStyleDescriptor(args: GetMapStyleDescriptorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMapStyleDescriptorCommandOutput) => void): void;
    
    getMapTile(args: GetMapTileCommandInput, options?: __HttpHandlerOptions): Promise<GetMapTileCommandOutput>;
    getMapTile(args: GetMapTileCommandInput, cb: (err: any, data?: GetMapTileCommandOutput) => void): void;
    getMapTile(args: GetMapTileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMapTileCommandOutput) => void): void;
    
    listDevicePositions(args: ListDevicePositionsCommandInput, options?: __HttpHandlerOptions): Promise<ListDevicePositionsCommandOutput>;
    listDevicePositions(args: ListDevicePositionsCommandInput, cb: (err: any, data?: ListDevicePositionsCommandOutput) => void): void;
    listDevicePositions(args: ListDevicePositionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDevicePositionsCommandOutput) => void): void;
    
    listGeofenceCollections(args: ListGeofenceCollectionsCommandInput, options?: __HttpHandlerOptions): Promise<ListGeofenceCollectionsCommandOutput>;
    listGeofenceCollections(args: ListGeofenceCollectionsCommandInput, cb: (err: any, data?: ListGeofenceCollectionsCommandOutput) => void): void;
    listGeofenceCollections(args: ListGeofenceCollectionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGeofenceCollectionsCommandOutput) => void): void;
    
    listGeofences(args: ListGeofencesCommandInput, options?: __HttpHandlerOptions): Promise<ListGeofencesCommandOutput>;
    listGeofences(args: ListGeofencesCommandInput, cb: (err: any, data?: ListGeofencesCommandOutput) => void): void;
    listGeofences(args: ListGeofencesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGeofencesCommandOutput) => void): void;
    
    listMaps(args: ListMapsCommandInput, options?: __HttpHandlerOptions): Promise<ListMapsCommandOutput>;
    listMaps(args: ListMapsCommandInput, cb: (err: any, data?: ListMapsCommandOutput) => void): void;
    listMaps(args: ListMapsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMapsCommandOutput) => void): void;
    
    listPlaceIndexes(args: ListPlaceIndexesCommandInput, options?: __HttpHandlerOptions): Promise<ListPlaceIndexesCommandOutput>;
    listPlaceIndexes(args: ListPlaceIndexesCommandInput, cb: (err: any, data?: ListPlaceIndexesCommandOutput) => void): void;
    listPlaceIndexes(args: ListPlaceIndexesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPlaceIndexesCommandOutput) => void): void;
    
    listRouteCalculators(args: ListRouteCalculatorsCommandInput, options?: __HttpHandlerOptions): Promise<ListRouteCalculatorsCommandOutput>;
    listRouteCalculators(args: ListRouteCalculatorsCommandInput, cb: (err: any, data?: ListRouteCalculatorsCommandOutput) => void): void;
    listRouteCalculators(args: ListRouteCalculatorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRouteCalculatorsCommandOutput) => void): void;
    
    listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
    listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    
    listTrackerConsumers(args: ListTrackerConsumersCommandInput, options?: __HttpHandlerOptions): Promise<ListTrackerConsumersCommandOutput>;
    listTrackerConsumers(args: ListTrackerConsumersCommandInput, cb: (err: any, data?: ListTrackerConsumersCommandOutput) => void): void;
    listTrackerConsumers(args: ListTrackerConsumersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTrackerConsumersCommandOutput) => void): void;
    
    listTrackers(args: ListTrackersCommandInput, options?: __HttpHandlerOptions): Promise<ListTrackersCommandOutput>;
    listTrackers(args: ListTrackersCommandInput, cb: (err: any, data?: ListTrackersCommandOutput) => void): void;
    listTrackers(args: ListTrackersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTrackersCommandOutput) => void): void;
    
    putGeofence(args: PutGeofenceCommandInput, options?: __HttpHandlerOptions): Promise<PutGeofenceCommandOutput>;
    putGeofence(args: PutGeofenceCommandInput, cb: (err: any, data?: PutGeofenceCommandOutput) => void): void;
    putGeofence(args: PutGeofenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutGeofenceCommandOutput) => void): void;
    
    searchPlaceIndexForPosition(args: SearchPlaceIndexForPositionCommandInput, options?: __HttpHandlerOptions): Promise<SearchPlaceIndexForPositionCommandOutput>;
    searchPlaceIndexForPosition(args: SearchPlaceIndexForPositionCommandInput, cb: (err: any, data?: SearchPlaceIndexForPositionCommandOutput) => void): void;
    searchPlaceIndexForPosition(args: SearchPlaceIndexForPositionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchPlaceIndexForPositionCommandOutput) => void): void;
    
    searchPlaceIndexForSuggestions(args: SearchPlaceIndexForSuggestionsCommandInput, options?: __HttpHandlerOptions): Promise<SearchPlaceIndexForSuggestionsCommandOutput>;
    searchPlaceIndexForSuggestions(args: SearchPlaceIndexForSuggestionsCommandInput, cb: (err: any, data?: SearchPlaceIndexForSuggestionsCommandOutput) => void): void;
    searchPlaceIndexForSuggestions(args: SearchPlaceIndexForSuggestionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchPlaceIndexForSuggestionsCommandOutput) => void): void;
    
    searchPlaceIndexForText(args: SearchPlaceIndexForTextCommandInput, options?: __HttpHandlerOptions): Promise<SearchPlaceIndexForTextCommandOutput>;
    searchPlaceIndexForText(args: SearchPlaceIndexForTextCommandInput, cb: (err: any, data?: SearchPlaceIndexForTextCommandOutput) => void): void;
    searchPlaceIndexForText(args: SearchPlaceIndexForTextCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchPlaceIndexForTextCommandOutput) => void): void;
    
    tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
    tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    
    untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
    untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    
    updateGeofenceCollection(args: UpdateGeofenceCollectionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateGeofenceCollectionCommandOutput>;
    updateGeofenceCollection(args: UpdateGeofenceCollectionCommandInput, cb: (err: any, data?: UpdateGeofenceCollectionCommandOutput) => void): void;
    updateGeofenceCollection(args: UpdateGeofenceCollectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateGeofenceCollectionCommandOutput) => void): void;
    
    updateMap(args: UpdateMapCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMapCommandOutput>;
    updateMap(args: UpdateMapCommandInput, cb: (err: any, data?: UpdateMapCommandOutput) => void): void;
    updateMap(args: UpdateMapCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMapCommandOutput) => void): void;
    
    updatePlaceIndex(args: UpdatePlaceIndexCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePlaceIndexCommandOutput>;
    updatePlaceIndex(args: UpdatePlaceIndexCommandInput, cb: (err: any, data?: UpdatePlaceIndexCommandOutput) => void): void;
    updatePlaceIndex(args: UpdatePlaceIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePlaceIndexCommandOutput) => void): void;
    
    updateRouteCalculator(args: UpdateRouteCalculatorCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRouteCalculatorCommandOutput>;
    updateRouteCalculator(args: UpdateRouteCalculatorCommandInput, cb: (err: any, data?: UpdateRouteCalculatorCommandOutput) => void): void;
    updateRouteCalculator(args: UpdateRouteCalculatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRouteCalculatorCommandOutput) => void): void;
    
    updateTracker(args: UpdateTrackerCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTrackerCommandOutput>;
    updateTracker(args: UpdateTrackerCommandInput, cb: (err: any, data?: UpdateTrackerCommandOutput) => void): void;
    updateTracker(args: UpdateTrackerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTrackerCommandOutput) => void): void;
}
