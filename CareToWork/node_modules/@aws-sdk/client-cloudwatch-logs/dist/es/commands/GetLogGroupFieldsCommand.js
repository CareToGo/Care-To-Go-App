import { __extends } from "tslib";
import { GetLogGroupFieldsRequest, GetLogGroupFieldsResponse } from "../models/models_0";
import { deserializeAws_json1_1GetLogGroupFieldsCommand, serializeAws_json1_1GetLogGroupFieldsCommand, } from "../protocols/Aws_json1_1";
import { getSerdePlugin } from "@aws-sdk/middleware-serde";
import { Command as $Command } from "@aws-sdk/smithy-client";
/**
 * <p>Returns a list of the fields that are included in log events in the specified log group, along with the percentage of log events
 *     that contain each field. The search is limited to a time period that you specify.</p>
 *          <p>In the results, fields that start with @ are fields generated by CloudWatch Logs. For
 *       example, <code>@timestamp</code> is the timestamp of each log event. For more information about the fields that are
 *       generated by CloudWatch logs, see
 *       <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html">Supported Logs and Discovered Fields</a>.</p>
 *          <p>The response results are sorted by the frequency percentage, starting
 *     with the highest percentage.</p>
 */
var GetLogGroupFieldsCommand = /** @class */ (function (_super) {
    __extends(GetLogGroupFieldsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetLogGroupFieldsCommand(input) {
        var _this = 
        // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
        // End section: command_constructor
    }
    /**
     * @internal
     */
    GetLogGroupFieldsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CloudWatchLogsClient";
        var commandName = "GetLogGroupFieldsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: GetLogGroupFieldsRequest.filterSensitiveLog,
            outputFilterSensitiveLog: GetLogGroupFieldsResponse.filterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetLogGroupFieldsCommand.prototype.serialize = function (input, context) {
        return serializeAws_json1_1GetLogGroupFieldsCommand(input, context);
    };
    GetLogGroupFieldsCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_json1_1GetLogGroupFieldsCommand(output, context);
    };
    return GetLogGroupFieldsCommand;
}($Command));
export { GetLogGroupFieldsCommand };
//# sourceMappingURL=GetLogGroupFieldsCommand.js.map